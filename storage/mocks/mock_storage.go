// Code generated by MockGen. DO NOT EDIT.
// Source: storage/storage.go
//
// Generated by this command:
//
//	mockgen -source=storage/storage.go -destination=storage/mocks/mock_storage.go
//

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	reflect "reflect"

	storage "github.com/rodionross/cushon-scenario/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateAccoutAndFund mocks base method.
func (m *MockRepository) CreateAccoutAndFund(userId, accountTypeId, fundId string, balance int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccoutAndFund", userId, accountTypeId, fundId, balance)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccoutAndFund indicates an expected call of CreateAccoutAndFund.
func (mr *MockRepositoryMockRecorder) CreateAccoutAndFund(userId, accountTypeId, fundId, balance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccoutAndFund", reflect.TypeOf((*MockRepository)(nil).CreateAccoutAndFund), userId, accountTypeId, fundId, balance)
}

// GetAccountAndFund mocks base method.
func (m *MockRepository) GetAccountAndFund(userId string) (*storage.AccountFund, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountAndFund", userId)
	ret0, _ := ret[0].(*storage.AccountFund)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountAndFund indicates an expected call of GetAccountAndFund.
func (mr *MockRepositoryMockRecorder) GetAccountAndFund(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountAndFund", reflect.TypeOf((*MockRepository)(nil).GetAccountAndFund), userId)
}
